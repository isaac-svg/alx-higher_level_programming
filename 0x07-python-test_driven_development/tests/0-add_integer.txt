
=======================
0-add_integer.py Usage
=======================

This module defines a function that adds integers ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)`` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(1, 3)
    4

::

    >>> add_integer(0, -2)
    -2

The function  works with floating-point values.

::

    >>> add_integer(2.0, 3.0)
    5

Floats are casted to ints before the addition operation is performed.

::

    >>> add_integer(2.5, 1.6)
    3

::

    >>> add_integer(-2.5, -1.6)
    -3

Floating and non-floating point values can be added.

::

    >>> add_integer(-1.3, 3)
    2

The second argument is optional - it is defaulted to 98.

::

    >>> add_integer(2)
    100

Types not Numbers
===========

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("hi", 0)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(-2, "hi")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are not numbers, a TypeError message is
printed but only for the first argument.

::

    >>> add_integer("hello", "world")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function fails if infinity is provided as an argument.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

With NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
